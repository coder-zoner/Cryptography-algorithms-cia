#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

void get_key_order(const char *keyword, int *key_order, int cols)
{
    int seen[26] = {0};
    int count = 0;
    for (int i = 0; i < strlen(keyword); i++)
    {
        char ch = toupper(keyword[i]);
        int index = ch - 'A';
        if (!seen[index])
        {
            seen[index] = count++;
        }
        key_order[i] = seen[index];
    }
}

char *myzkowski_encrypt(const char *plaintext, const char *keyword)
{
    int len = strlen(plaintext);
    int cols = strlen(keyword);
    int *key_order = (int *)malloc(cols * sizeof(int));
    get_key_order(keyword, key_order, cols);

    char *plain = (char *)malloc(len + cols);
    int p = 0;
    for (int i = 0; i < len; i++)
    {
        if (!isspace(plaintext[i]))
        {
            plain[p++] = toupper(plaintext[i]);
        }
    }
    plain[p] = '\0';

    while (p % cols != 0)
    {
        plain[p++] = 'X';
    }
    plain[p] = '\0';
    int rows = p / cols;

    char **grid = (char **)malloc(rows * sizeof(char *));
    for (int i = 0; i < rows; i++)
    {
        grid[i] = (char *)malloc((cols + 1) * sizeof(char));
        strncpy(grid[i], plain + i * cols, cols);
        grid[i][cols] = '\0';
    }

    char *result = (char *)malloc(p + 1);
    int r = 0;
    for (int n = 0; n < cols; n++)
    {
        for (int c = 0; c < cols; c++)
        {
            if (key_order[c] == n)
            {
                for (int i = 0; i < rows; i++)
                {
                    result[r++] = grid[i][c];
                }
            }
        }
    }
    result[r] = '\0';

    for (int i = 0; i < rows; i++)
    {
        free(grid[i]);
    }
    free(grid);
    free(plain);
    free(key_order);

    return result;
}

int main()
{
    char plaintext[] = "this is myzkowski encryption method";
    char keyword[] = "sample";

    char *encrypted = myzkowski_encrypt(plaintext, keyword);

    printf("Original:   %s\n", plaintext);
    printf("Keyword:    %s\n", keyword);
    printf("Encrypted:  %s\n", encrypted);

    free(encrypted);
    return 0;
}
